% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/every.R
\name{every}
\alias{every}
\title{Evaluate an Expression on a Fixed Time Interval}
\usage{
every(seconds = 1, do = cat("Thump!"), ...)
}
\arguments{
\item{seconds}{time interval in seconds}

\item{do}{expression}

\item{...}{any other arguments passed to shiny::observe()}
}
\value{
Shiny observer
}
\description{
Can be used as a keepalive utility for external connections such as SSH and WebSocket, or Shiny itself; Can also be used as a watchdog to periodically check on something.
    This functions is thin wrapper around shiny::reactiveTimer() and shiny::observe()
}
\examples{

\dontrun{
every(60, {
  cat("Keeping Connection Alive...\\n")
  ssh::ssh_exec_internal(session = my_session,
                         command = "whoami")
})

shinyApp(
fluidPage(
   shinyjs::useShinyjs(),
   actionButton("stop", "Stop"),
   textInput("blinker", "Blinker Input"),
),
function(input, output, session) {
   heartbeat <- shinybeats::every(1.2, {
       shinyjs::toggle("blinker")
   })

   observeEvent(input$stop,{
       heartbeat$destroy()
   })
}
)
}
}
\seealso{
[shiny::observe()]
}
